<?xml version="1.0"?>
<doc>
    <assembly>
        <name>YandexMusicResolver</name>
    </assembly>
    <members>
        <member name="T:YandexMusicResolver.YandexApiResponseException">
            <summary>
            Represents errors that returned from yandex api.
            </summary>
        </member>
        <member name="P:YandexMusicResolver.YandexApiResponseException.ApiMetaError">
            <summary>
            Contains info about error from yandex api
            </summary>
        </member>
        <member name="M:YandexMusicResolver.YandexApiResponseException.#ctor(YandexMusicResolver.Responces.MetaError)">
            <inheritdoc />
        </member>
        <member name="M:YandexMusicResolver.YandexApiResponseException.#ctor(System.String,YandexMusicResolver.Responces.MetaError)">
            <inheritdoc />
        </member>
        <member name="T:YandexMusicResolver.AudioItems.IAudioItem">
            <summary>
            Marker interface for all loadable items
            </summary>
        </member>
        <member name="T:YandexMusicResolver.AudioItems.YandexMusicPlaylist">
            <summary>
            Represents playlist from Yandex Music
            </summary>
        </member>
        <member name="M:YandexMusicResolver.AudioItems.YandexMusicPlaylist.#ctor(System.String,System.Collections.ObjectModel.ReadOnlyCollection{YandexMusicResolver.AudioItems.YandexMusicTrack},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:YandexMusicResolver.AudioItems.YandexMusicPlaylist"/> class.
            </summary>
            <param name="title">Playlist title</param>
            <param name="tracks">Collection with tracks</param>
            <param name="isSearchResult">Is this playlist is search result</param>
        </member>
        <member name="P:YandexMusicResolver.AudioItems.YandexMusicPlaylist.Title">
            <summary>
            Playlist title
            </summary>
        </member>
        <member name="P:YandexMusicResolver.AudioItems.YandexMusicPlaylist.Tracks">
            <summary>
            Collection with tracks in playlist
            </summary>
        </member>
        <member name="P:YandexMusicResolver.AudioItems.YandexMusicPlaylist.IsSearchResult">
            <summary>
            Is this playlist a search result
            </summary>
        </member>
        <member name="T:YandexMusicResolver.AudioItems.YandexMusicSearchResult">
            <summary>
            Represents YandexMusic search result
            </summary>
        </member>
        <member name="P:YandexMusicResolver.AudioItems.YandexMusicSearchResult.Query">
            <summary>
            Search query text
            </summary>
        </member>
        <member name="P:YandexMusicResolver.AudioItems.YandexMusicSearchResult.Limit">
            <summary>
            Tracks limit count
            </summary>
        </member>
        <member name="P:YandexMusicResolver.AudioItems.YandexMusicSearchResult.Type">
            <summary>
            Search data type
            </summary>
        </member>
        <member name="P:YandexMusicResolver.AudioItems.YandexMusicSearchResult.Albums">
            <summary>
            Albums list.
            Will be <code>null</code> if the search should not search for albums
            </summary>
        </member>
        <member name="P:YandexMusicResolver.AudioItems.YandexMusicSearchResult.Playlists">
            <summary>
            Playlists list.
            Will be <code>null</code> if the search should not search for playlists
            </summary>
        </member>
        <member name="P:YandexMusicResolver.AudioItems.YandexMusicSearchResult.Tracks">
            <summary>
            Tracks list.
            Will be <code>null</code> if the search should not search for tracks
            </summary>
        </member>
        <member name="T:YandexMusicResolver.AudioItems.YandexMusicTrack">
            <summary>
            AudioTrackInfo wrapper to resolve track direct url
            </summary>
        </member>
        <member name="P:YandexMusicResolver.AudioItems.YandexMusicTrack.TrackInfo">
            <summary>
            Get track info
            </summary>
        </member>
        <member name="M:YandexMusicResolver.AudioItems.YandexMusicTrack.#ctor(YandexMusicResolver.AudioTrackInfo,YandexMusicResolver.YandexMusicMainResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:YandexMusicResolver.AudioItems.YandexMusicTrack"/> class.
            </summary>
            <param name="trackInfo">Track info</param>
            <param name="mainResolver">Resolver for direct url getting</param>
        </member>
        <member name="M:YandexMusicResolver.AudioItems.YandexMusicTrack.GetDirectUrl">
            <summary>
            Get direct url to track
            </summary>
            <remarks>If you not authorized will return 30s track version. This is YandexMusic restriction</remarks>
            <returns>Direct url to download track</returns>
        </member>
        <member name="T:YandexMusicResolver.AudioTrackInfo">
            <summary>
            Contains info about track
            </summary>
        </member>
        <member name="P:YandexMusicResolver.AudioTrackInfo.Title">
            <summary>
            Track title
            </summary>
        </member>
        <member name="P:YandexMusicResolver.AudioTrackInfo.Author">
            <summary>
            Track author
            </summary>
        </member>
        <member name="P:YandexMusicResolver.AudioTrackInfo.Length">
            <summary>
            Track lenght
            </summary>
        </member>
        <member name="P:YandexMusicResolver.AudioTrackInfo.Identifier">
            <summary>
            Track identifier
            </summary>
        </member>
        <member name="P:YandexMusicResolver.AudioTrackInfo.IsStream">
            <summary>
            Is track live stream
            </summary>
        </member>
        <member name="P:YandexMusicResolver.AudioTrackInfo.Uri">
            <summary>
            Track link
            </summary>
        </member>
        <member name="P:YandexMusicResolver.AudioTrackInfo.Metadata">
            <summary>
            Additional track metadata
            </summary>
        </member>
        <member name="T:YandexMusicResolver.Config.EmptyYandexConfig">
            <summary>
            Represents <see cref="T:YandexMusicResolver.Config.IYandexConfig"/> implementation placeholder
            </summary>
        </member>
        <member name="M:YandexMusicResolver.Config.EmptyYandexConfig.Load">
            <inheritdoc />
        </member>
        <member name="M:YandexMusicResolver.Config.EmptyYandexConfig.Save">
            <inheritdoc />
        </member>
        <member name="P:YandexMusicResolver.Config.EmptyYandexConfig.YandexLogin">
            <inheritdoc />
        </member>
        <member name="P:YandexMusicResolver.Config.EmptyYandexConfig.YandexPassword">
            <inheritdoc />
        </member>
        <member name="P:YandexMusicResolver.Config.EmptyYandexConfig.YandexToken">
            <inheritdoc />
        </member>
        <member name="P:YandexMusicResolver.Config.EmptyYandexConfig.YandexProxy">
            <inheritdoc />
        </member>
        <member name="T:YandexMusicResolver.Config.FileYandexConfig">
            <summary>
            Represents <see cref="T:YandexMusicResolver.Config.IYandexConfig"/> implementation that stores data in a file
            </summary>
        </member>
        <member name="M:YandexMusicResolver.Config.FileYandexConfig.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YandexMusicResolver.Config.FileYandexConfig"/> class.
            </summary>
            <param name="filePath">Target file path</param>
        </member>
        <member name="M:YandexMusicResolver.Config.FileYandexConfig.Load">
            <inheritdoc />
        </member>
        <member name="M:YandexMusicResolver.Config.FileYandexConfig.Save">
            <inheritdoc />
        </member>
        <member name="P:YandexMusicResolver.Config.FileYandexConfig.YandexLogin">
            <inheritdoc />
        </member>
        <member name="P:YandexMusicResolver.Config.FileYandexConfig.YandexPassword">
            <inheritdoc />
        </member>
        <member name="P:YandexMusicResolver.Config.FileYandexConfig.YandexToken">
            <inheritdoc />
        </member>
        <member name="P:YandexMusicResolver.Config.FileYandexConfig.YandexProxyAddress">
            <summary>
            Uri to create proxy
            </summary>
        </member>
        <member name="P:YandexMusicResolver.Config.FileYandexConfig.YandexProxy">
            <inheritdoc />
        </member>
        <member name="T:YandexMusicResolver.Config.IYandexConfig">
            <summary>
            Represents yandex config
            </summary>
        </member>
        <member name="M:YandexMusicResolver.Config.IYandexConfig.Load">
            <summary>
            Load config
            </summary>
        </member>
        <member name="M:YandexMusicResolver.Config.IYandexConfig.Save">
            <summary>
            Save config
            </summary>
        </member>
        <member name="P:YandexMusicResolver.Config.IYandexConfig.YandexLogin">
            <summary>
            Login for Yandex account
            </summary>
            <remarks>If specified, will be used with a password to get a token if there are problems with the current one</remarks>
        </member>
        <member name="P:YandexMusicResolver.Config.IYandexConfig.YandexPassword">
            <summary>
            Password for Yandex account
            </summary>
            <remarks>If specified, will be used with a password to get a token if there are problems with the current one</remarks>
        </member>
        <member name="M:YandexMusicResolver.Config.IYandexConfig.AuthorizeAsync(System.Boolean)">
            <summary>
            Try perform authorization
            </summary>
            <param name="allowRunWithoutAuth">If false will throw error if we cant authorize</param>
            <returns>Task represent current async operation</returns>
            <exception cref="T:System.Security.Authentication.AuthenticationException">Will be thrown if we cant authorize and <see cref="!:allowRunWithoutAuth"/> is false</exception>
        </member>
        <member name="T:YandexMusicResolver.Config.IYandexTokenHolder">
            <summary>
            Represents entity which can store Yandex token to use it in requests
            </summary>
        </member>
        <member name="P:YandexMusicResolver.Config.IYandexTokenHolder.YandexToken">
            <summary>
            
            </summary>
        </member>
        <member name="T:YandexMusicResolver.Config.IYandexProxyTokenHolder">
            <summary>
            Represents entity what must contain proxy and token
            </summary>
        </member>
        <member name="T:YandexMusicResolver.Config.IYandexProxyHolder">
            <summary>
            Represents entity that must contains proxy
            </summary>
        </member>
        <member name="P:YandexMusicResolver.Config.IYandexProxyHolder.YandexProxy">
            <summary>
            Gets or sets proxy to use with requests
            </summary>
        </member>
        <member name="T:YandexMusicResolver.Loaders.YandexMusicDirectUrlLoader">
            <summary>
            Represents class to getting direct links from tracks
            </summary>
        </member>
        <member name="M:YandexMusicResolver.Loaders.YandexMusicDirectUrlLoader.#ctor(YandexMusicResolver.Config.IYandexConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:YandexMusicResolver.Loaders.YandexMusicDirectUrlLoader"/> class.
            </summary>
            <param name="config">Config instance for performing requests</param>
        </member>
        <member name="M:YandexMusicResolver.Loaders.YandexMusicDirectUrlLoader.GetDirectUrl(System.String,System.String)">
            <summary>
            Get direct url to download track
            </summary>
            <remarks>If you not authorized will return 30s track version. This is YandexMusic restriction</remarks>
            <param name="trackId">Target track id</param>
            <param name="codec">Target codec. mp3 by default</param>
            <returns>Direct url to download track</returns>
            <exception cref="T:System.Exception">Couldn't find supported track format</exception>
        </member>
        <member name="T:YandexMusicResolver.Loaders.YandexMusicPlaylistLoader">
            <summary>
            Represents class to getting playlists and albums from Yandex Music
            </summary>
        </member>
        <member name="M:YandexMusicResolver.Loaders.YandexMusicPlaylistLoader.#ctor(YandexMusicResolver.Config.IYandexConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:YandexMusicResolver.Loaders.YandexMusicPlaylistLoader"/> class.
            </summary>
            <param name="config">Config instance for performing requests</param>
        </member>
        <member name="M:YandexMusicResolver.Loaders.YandexMusicPlaylistLoader.LoadPlaylist(System.String,System.String,System.Func{YandexMusicResolver.AudioTrackInfo,YandexMusicResolver.AudioItems.YandexMusicTrack})">
            <summary>
            Loads the playlist from Yandex Music
            </summary>
            <param name="userId">Id of user who created the playlist</param>
            <param name="playlistId">Target playlist id</param>
            <param name="trackFactory">Track factory to create YandexMusicTrack from AudioTrackInfo</param>
            <returns>Playlist instance</returns>
        </member>
        <member name="M:YandexMusicResolver.Loaders.YandexMusicPlaylistLoader.LoadPlaylist(System.String,System.Func{YandexMusicResolver.AudioTrackInfo,YandexMusicResolver.AudioItems.YandexMusicTrack})">
            <summary>
            Loads the album from Yandex Music
            </summary>
            <param name="albumId">Target album id</param>
            <param name="trackFactory">Track factory to create YandexMusicTrack from AudioTrackInfo</param>
            <returns>Playlist instance</returns>
        </member>
        <member name="T:YandexMusicResolver.Loaders.YandexMusicSearchResultLoader">
            <summary>
            Represents search on Yandex Music
            </summary>
        </member>
        <member name="F:YandexMusicResolver.Loaders.YandexMusicSearchResultLoader.DefaultLimit">
            <summary>
            Default limit for searching
            </summary>
        </member>
        <member name="P:YandexMusicResolver.Loaders.YandexMusicSearchResultLoader.SearchPrefix">
            <summary>
            Special prefix for complicated requests
            </summary>
        </member>
        <member name="M:YandexMusicResolver.Loaders.YandexMusicSearchResultLoader.#ctor(YandexMusicResolver.Config.IYandexConfig,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YandexMusicResolver.Loaders.YandexMusicSearchResultLoader"/> class.
            </summary>
            <param name="config">Config instance for performing requests</param>
            <param name="searchPrefix"></param>
        </member>
        <member name="M:YandexMusicResolver.Loaders.YandexMusicSearchResultLoader.LoadSearchResult(System.String,YandexMusicResolver.Loaders.YandexMusicPlaylistLoader,System.Func{YandexMusicResolver.AudioTrackInfo,YandexMusicResolver.AudioItems.YandexMusicTrack})">
            <summary>
            Perform search request on Yandex Music
            </summary>
            <remarks>Complicated query is <see cref="P:YandexMusicResolver.Loaders.YandexMusicSearchResultLoader.SearchPrefix"/>:<see cref="T:YandexMusicResolver.YandexSearchType"/>:limit:text</remarks>
            <param name="query">Search query. May be complicated or default values will be used</param>
            <param name="playlistLoader">Playlist loader instance</param>
            <param name="trackFactory">Track factory to create YandexMusicTrack from AudioTrackInfo</param>
            <returns>Instance of YandexMusicSearchResult</returns>
        </member>
        <member name="M:YandexMusicResolver.Loaders.YandexMusicSearchResultLoader.TryParseQuery(System.String,System.String@,YandexMusicResolver.YandexSearchType@,System.Int32@)">
            <summary>
            Parse complicated query into pieces
            </summary>
            <remarks>Complicated query is <see cref="P:YandexMusicResolver.Loaders.YandexMusicSearchResultLoader.SearchPrefix"/>:<see cref="T:YandexMusicResolver.YandexSearchType"/>:limit:text</remarks>
            <param name="query">Target query</param>
            <param name="text">Search text</param>
            <param name="type">Search type</param>
            <param name="limit">Search limit</param>
            <returns>True if is this complicated query</returns>
        </member>
        <member name="M:YandexMusicResolver.Loaders.YandexMusicSearchResultLoader.LoadSearchResult(YandexMusicResolver.YandexSearchType,System.String,YandexMusicResolver.Loaders.YandexMusicPlaylistLoader,System.Func{YandexMusicResolver.AudioTrackInfo,YandexMusicResolver.AudioItems.YandexMusicTrack},System.Int32)">
            <summary>
            Perform search request on Yandex Music
            </summary>
            <param name="type">Search type</param>
            <param name="query">Search text</param>
            <param name="playlistLoader">Playlist loader instance</param>
            <param name="trackFactory">Track factory to create YandexMusicTrack from AudioTrackInfo</param>
            <param name="limit">Search results limit count</param>
            <returns>Instance of YandexMusicSearchResult</returns>
            <exception cref="T:System.Exception">Throws exception if something went wrong</exception>
        </member>
        <member name="T:YandexMusicResolver.Loaders.YandexMusicTrackLoader">
            <summary>
            Represents track info loader from Yandex Music
            </summary>
        </member>
        <member name="F:YandexMusicResolver.Loaders.YandexMusicTrackLoader.Config">
            <summary>
            Config instance for performing requests
            </summary>
        </member>
        <member name="M:YandexMusicResolver.Loaders.YandexMusicTrackLoader.#ctor(YandexMusicResolver.Config.IYandexConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:YandexMusicResolver.Loaders.YandexMusicTrackLoader"/> class.
            </summary>
            <param name="config">Config instance for performing requests</param>
        </member>
        <member name="M:YandexMusicResolver.Loaders.YandexMusicTrackLoader.LoadTrack(System.String,System.String,System.Func{YandexMusicResolver.AudioTrackInfo,YandexMusicResolver.AudioItems.YandexMusicTrack})">
            <summary>
            Load track
            </summary>
            <param name="albumId">Album id with track</param>
            <param name="trackId">Target track id</param>
            <param name="trackFactory">Track factory to create YandexMusicTrack from AudioTrackInfo</param>
            <returns>Instance of <see cref="T:YandexMusicResolver.AudioItems.YandexMusicTrack"/></returns>
        </member>
        <member name="M:YandexMusicResolver.Loaders.YandexMusicTrackLoader.LoadTrackInfo(System.String,System.String)">
            <summary>
            Load track info
            </summary>
            <param name="albumId">Album id with track</param>
            <param name="trackId">Target track id</param>
            <returns>Instance of <see cref="T:YandexMusicResolver.AudioTrackInfo"/></returns>
        </member>
        <member name="T:YandexMusicResolver.Responces.ITrackInfoContainer">
            <summary>
            Represents entity from which we can get <see cref="T:YandexMusicResolver.AudioTrackInfo"/>
            </summary>
        </member>
        <member name="M:YandexMusicResolver.Responces.ITrackInfoContainer.ToAudioTrackInfo(YandexMusicResolver.Loaders.YandexMusicTrackLoader)">
            <summary>
            Get related <see cref="T:YandexMusicResolver.AudioTrackInfo"/>
            </summary>
            <param name="loader">Track loader instance</param>
            <returns>Instance of <see cref="T:YandexMusicResolver.AudioTrackInfo"/></returns>
        </member>
        <member name="T:YandexMusicResolver.Responces.MetaAlbumSignature">
            <summary>
            Represents data to resolve album
            </summary>
        </member>
        <member name="P:YandexMusicResolver.Responces.MetaAlbumSignature.Id">
            <summary>
            Id of this entity
            </summary>
        </member>
        <member name="P:YandexMusicResolver.Responces.MetaAlbumSignature.Title">
            <summary>
            Title of this album
            </summary>
        </member>
        <member name="P:YandexMusicResolver.Responces.MetaAlbumSignature.CoverUri">
            <summary>
            Cover link
            </summary>
        </member>
        <member name="P:YandexMusicResolver.Responces.MetaAlbumSignature.OgImage">
            <summary>
            Opengraph image (alternative cover) url
            </summary>
        </member>
        <member name="P:YandexMusicResolver.Responces.MetaAlbumSignature.TrackCount">
            <summary>
            Count of tracks
            </summary>
        </member>
        <member name="P:YandexMusicResolver.Responces.MetaAlbumSignature.Available">
            <summary>
            Is this playlist available now
            </summary>
        </member>
        <member name="M:YandexMusicResolver.Responces.MetaAlbumSignature.GetPlaylist(YandexMusicResolver.Loaders.YandexMusicPlaylistLoader,System.Func{YandexMusicResolver.AudioTrackInfo,YandexMusicResolver.AudioItems.YandexMusicTrack})">
            <summary>
            Get full playlist with tracks
            </summary>
            <param name="yandexMusicPlaylistLoader">Instance of playlist loader to load playlist</param>
            <param name="trackFactory">Track factory to create YandexMusicTrack from AudioTrackInfo</param>
            <returns>Playlist with tracks</returns>
        </member>
        <member name="T:YandexMusicResolver.Responces.MetaArtist">
            <summary>
            Represent a artist in Yandex Music
            </summary>
        </member>
        <member name="P:YandexMusicResolver.Responces.MetaArtist.Id">
            <summary>
            Artist ID
            </summary>
        </member>
        <member name="P:YandexMusicResolver.Responces.MetaArtist.Name">
            <summary>
            Artist name
            </summary>
        </member>
        <member name="T:YandexMusicResolver.Responces.MetaError">
            <summary>
            Represents error that returned from Yandex Music
            </summary>
        </member>
        <member name="P:YandexMusicResolver.Responces.MetaError.Name">
            <summary>
            Error name
            </summary>
        </member>
        <member name="P:YandexMusicResolver.Responces.MetaError.Message">
            <summary>
            Error message
            </summary>
        </member>
        <member name="T:YandexMusicResolver.Responces.MetaOwner">
            <summary>
            Represent playlist owner
            </summary>
        </member>
        <member name="P:YandexMusicResolver.Responces.MetaOwner.Uid">
            <summary>
            Owner ID
            </summary>
        </member>
        <member name="P:YandexMusicResolver.Responces.MetaOwner.Login">
            <summary>
            Owner login
            </summary>
        </member>
        <member name="P:YandexMusicResolver.Responces.MetaOwner.Name">
            <summary>
            Owner name
            </summary>
        </member>
        <member name="P:YandexMusicResolver.Responces.MetaOwner.Verified">
            <summary>
            Is owner verified
            </summary>
        </member>
        <member name="T:YandexMusicResolver.Responces.MetaPlaylistSignature">
            <summary>
            Represents data to resolve playlist
            </summary>
        </member>
        <member name="P:YandexMusicResolver.Responces.MetaPlaylistSignature.Owner">
            <summary>
            Playlist owner info
            </summary>
        </member>
        <member name="M:YandexMusicResolver.Responces.MetaPlaylistSignature.GetPlaylist(YandexMusicResolver.Loaders.YandexMusicPlaylistLoader,System.Func{YandexMusicResolver.AudioTrackInfo,YandexMusicResolver.AudioItems.YandexMusicTrack})">
            <inheritdoc />
        </member>
        <member name="T:YandexMusicResolver.Responces.MetaPlaylistTrack">
            <summary>
            Represent
            </summary>
        </member>
        <member name="P:YandexMusicResolver.Responces.MetaPlaylistTrack.Id">
            <summary>
            Track id
            </summary>
        </member>
        <member name="P:YandexMusicResolver.Responces.MetaPlaylistTrack.Albums">
            <summary>
            List of albums that contain this track
            </summary>
        </member>
        <member name="P:YandexMusicResolver.Responces.MetaPlaylistTrack.Timestamp">
            <summary>
            Creation timestamp
            </summary>
        </member>
        <member name="M:YandexMusicResolver.Responces.MetaPlaylistTrack.ToAudioTrackInfo(YandexMusicResolver.Loaders.YandexMusicTrackLoader)">
            <inheritdoc />
        </member>
        <member name="T:YandexMusicResolver.Responces.MetaTrack">
            <summary>
            Track data from Yandex Music
            </summary>
        </member>
        <member name="P:YandexMusicResolver.Responces.MetaTrack.Id">
            <summary>
            Track ID
            </summary>
        </member>
        <member name="P:YandexMusicResolver.Responces.MetaTrack.Title">
            <summary>
            Track title
            </summary>
        </member>
        <member name="P:YandexMusicResolver.Responces.MetaTrack.Available">
            <summary>
            Is track available
            </summary>
            <remarks>If false, then most likely you are trying to get this information while not in the CIS. At the moment, you need to use a proxy in the CIS or log in with an account that has Yandex Plus (a subscription from Yandex)</remarks>
        </member>
        <member name="P:YandexMusicResolver.Responces.MetaTrack.DurationMs">
            <summary>
            Track duration in ms
            </summary>
        </member>
        <member name="P:YandexMusicResolver.Responces.MetaTrack.Artists">
            <summary>
            Track authors list
            </summary>
        </member>
        <member name="P:YandexMusicResolver.Responces.MetaTrack.Albums">
            <summary>
            List of albums that contain this track
            </summary>
        </member>
        <member name="P:YandexMusicResolver.Responces.MetaTrack.CoverUri">
            <summary>
            Cover link
            </summary>
        </member>
        <member name="P:YandexMusicResolver.Responces.MetaTrack.OgImage">
            <summary>
            Opengraph image (alternative cover) link
            </summary>
        </member>
        <member name="P:YandexMusicResolver.Responces.MetaTrack.LyricsAvailable">
            <summary>
            Is lyrics available for this track
            </summary>
        </member>
        <member name="M:YandexMusicResolver.Responces.MetaTrack.ToAudioTrackInfo">
            <summary>
            Convert this meta class to <see cref="T:YandexMusicResolver.AudioTrackInfo"/>
            </summary>
            <returns>Instance of <see cref="T:YandexMusicResolver.AudioTrackInfo"/></returns>
        </member>
        <member name="M:YandexMusicResolver.Responces.MetaTrack.ToAudioTrackInfo(YandexMusicResolver.Loaders.YandexMusicTrackLoader)">
            <inheritdoc />
        </member>
        <member name="T:YandexMusicResolver.YandexMusicAuth">
            <summary>
            Represents a set of methods that serve for authorization in Yandex Music
            </summary>
        </member>
        <member name="M:YandexMusicResolver.YandexMusicAuth.CheckToken(System.String,YandexMusicResolver.Config.IYandexProxyHolder)">
            <summary>
            Validates token
            </summary>
            <param name="token">Token to validate</param>
            <param name="proxyHolder">Container for proxy, which should be used for request</param>
            <returns>True if token correct</returns>
        </member>
        <member name="M:YandexMusicResolver.YandexMusicAuth.GetToken(System.String,System.String,YandexMusicResolver.Config.IYandexProxyHolder)">
            <summary>
            Attempt to authorise
            </summary>
            <param name="login">Login from Yandex account</param>
            <param name="password">Password from Yandex account</param>
            <param name="proxyHolder">Container for proxy, which should be used for request</param>
            <returns>Token</returns>
        </member>
        <member name="M:YandexMusicResolver.YandexMusicAuth.GetToken(System.String,System.String,System.String,YandexMusicResolver.Config.IYandexProxyHolder)">
            <summary>
            Try to validate token or get new one using login and password
            </summary>
            <param name="existentToken">Token to validate</param>
            <param name="fallbackLogin">Login from Yandex account</param>
            <param name="fallbackPassword">Password from Yandex account</param>
            <param name="proxyHolder">Container for proxy, which should be used for request</param>
            <returns>Valid token, true if this is new token otherwise false</returns>
        </member>
        <member name="T:YandexMusicResolver.YandexMusicMainResolver">
            <summary>
            Represent main class for interacting with Yandex Music
            </summary>
        </member>
        <member name="P:YandexMusicResolver.YandexMusicMainResolver.PlaylistLoader">
            <summary>
            Instance of <see cref="T:YandexMusicResolver.Loaders.YandexMusicPlaylistLoader"/>
            </summary>
        </member>
        <member name="P:YandexMusicResolver.YandexMusicMainResolver.TrackLoader">
            <summary>
            Instance of <see cref="T:YandexMusicResolver.Loaders.YandexMusicTrackLoader"/>
            </summary>
        </member>
        <member name="P:YandexMusicResolver.YandexMusicMainResolver.DirectUrlLoader">
            <summary>
            Instance of <see cref="T:YandexMusicResolver.Loaders.YandexMusicDirectUrlLoader"/>
            </summary>
        </member>
        <member name="P:YandexMusicResolver.YandexMusicMainResolver.SearchResultLoader">
            <summary>
            Instance of <see cref="T:YandexMusicResolver.Loaders.YandexMusicSearchResultLoader"/>
            </summary>
        </member>
        <member name="M:YandexMusicResolver.YandexMusicMainResolver.#ctor(YandexMusicResolver.Config.IYandexConfig,System.Boolean,YandexMusicResolver.Loaders.YandexMusicPlaylistLoader,YandexMusicResolver.Loaders.YandexMusicTrackLoader,YandexMusicResolver.Loaders.YandexMusicDirectUrlLoader,YandexMusicResolver.Loaders.YandexMusicSearchResultLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:YandexMusicResolver.YandexMusicMainResolver"/> class.
            </summary>
            <param name="config">Yandex config instance</param>
            <param name="allowSearch">Is query in <see cref="M:YandexMusicResolver.YandexMusicMainResolver.ResolveQuery(System.String,System.Nullable{System.Boolean})"/> can be resolved with search</param>
            <param name="playlistLoader">Instance of <see cref="T:YandexMusicResolver.Loaders.YandexMusicPlaylistLoader"/></param>
            <param name="trackLoader">Instance of <see cref="T:YandexMusicResolver.Loaders.YandexMusicTrackLoader"/></param>
            <param name="directUrlLoader">Instance of <see cref="T:YandexMusicResolver.Loaders.YandexMusicDirectUrlLoader"/></param>
            <param name="searchResultLoader">Instance of <see cref="T:YandexMusicResolver.Loaders.YandexMusicSearchResultLoader"/></param>
        </member>
        <member name="P:YandexMusicResolver.YandexMusicMainResolver.AllowSearch">
            <summary>
            Is query in <see cref="M:YandexMusicResolver.YandexMusicMainResolver.ResolveQuery(System.String,System.Nullable{System.Boolean})"/> can be resolved with search
            </summary>
        </member>
        <member name="M:YandexMusicResolver.YandexMusicMainResolver.ResolveQuery(System.String,System.Nullable{System.Boolean})">
            <summary>
            Resolves yandex query. Can directly resolve playlists, albums, tracks by url and search queries
            </summary>
            <param name="query">Direct url or search query</param>
            <param name="allowSearchOverride">Is query in <see cref="M:YandexMusicResolver.YandexMusicMainResolver.ResolveQuery(System.String,System.Nullable{System.Boolean})"/> can be resolved with search. This parameter overrides <see cref="P:YandexMusicResolver.YandexMusicMainResolver.AllowSearch"/></param>
            <returns>Instance of <see cref="T:YandexMusicResolver.AudioItems.IAudioItem"/></returns>
        </member>
        <member name="T:YandexMusicResolver.YandexSearchType">
            <summary>
            The type of entities that will be searched for
            </summary>
        </member>
        <member name="F:YandexMusicResolver.YandexSearchType.Track">
            <summary>
            Only tracks
            </summary>
        </member>
        <member name="F:YandexMusicResolver.YandexSearchType.Album">
            <summary>
            Only albums
            </summary>
        </member>
        <member name="F:YandexMusicResolver.YandexSearchType.Playlist">
            <summary>
            Only playlists
            </summary>
        </member>
        <member name="F:YandexMusicResolver.YandexSearchType.All">
            <summary>
            All types
            </summary>
        </member>
    </members>
</doc>
